This repository contains smaller Java projects which can serve as
reference code for various tasks. The projects differ by what they do,
how they are structured, how to build them, how to test and deploy them,
which libraries and frameworks are used and so forth.

The convenience scripts buildall.sh and runall.sh provide a quick way to
test all projects.

Project:       buttons
* Structure:   graphical application
* Classes:     1
* Complexity:  1 constructor, 2 methods, 1 main method
* SLOC:        28 lines
* Interaction: graphical
* Building:    javac
* Running:     java
* Testing:     --

Project:       maths
* Structure:   library + test application
* Classes:     1
* SLOC:        43 lines
* Complexity:  1 constructor, 1 method, 1 main method (external)
* Interaction: none
* Building:    ant dist
* Running:     ant run
* Testing:     ant test

Project:       containers [adapted from
               https://github.com/Kvayn/PodilizerExampleProject]
* Structure:   application
* Classes:     3
* SLOC:        82 lines
* Complexity:  2 constructors, 4 methods, 8 getters/setters, 1 main
               method
* Interaction: stdout
* Building:    mvn compile
* Running:     mvn exec:java
* Testing:     --

Project:       transport
* Structure:   application
* Classes:     3
* SLOC:        162 lines
* Complexity:  3 constructors, 4 methods, 4 getters/setters, 1 main
               method
* Interaction: stdout, HTTP download
* Building:    make compile
* Running:     make run
* Testing:     junit (make test)

Project:       imageprocessor
* Structure:   application + plugins
* Classes:     6
* SLOC:        253 lines
* Complexity:  1 interface, 2 constructors, 7 methods, 3*3 methods in
               plugins, 1 main method
* Interaction: stdin/stdout REPL
* Building:    make compile
* Running:     make run
* Testing:     --

Project:       parser [adapted from
               https://dexvis.wordpress.com/2012/11/22/a-tale-of-two-grammars/]
* Structure:   application with code generation
* Classes:     6
* SLOC:        771 lines
* Complexity:  1 interface, 2 constructors, 22 methods, 24 virtual
               methods, 13  getters, 1 main method, 1 nested class
* Interaction: stdout, file input
* Building:    make regenerate compile
* Running:     make run
* Testing:     --
